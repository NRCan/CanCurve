# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CanCurveDialog
                                 A QGIS plugin
 Creating depth-damage functions
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-04-24
        git sha              : $Format:%H$
        copyright            : (C) 2024 by NRCan
        email                : heather.mcgrath@canada.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os, datetime, sys
import pandas as pd
import numpy as np

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

 


from hp.basic import convert_to_number
from hp.plug import plugLogger
from hp.qt import (
        DialogQtBasic, get_formLayout_data, get_gridLayout_data, get_tabelWidget_data
        )

from .parameters import (
    building_meta_dtypes, drf_db_default_fp,home_dir
    )

from .parameters_ui import building_details_options_d


#===============================================================================
# helpers-------
#===============================================================================
  
        
        
        
        




#===============================================================================
# Main Dialog----------
#===============================================================================
#append the path (resources_rc workaround)
sys.path.append(os.path.dirname(__file__))

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'cc_bldgs_dialog.ui'), resource_suffix='')





class BldgsDialog(QtWidgets.QDialog, FORM_CLASS, DialogQtBasic):
    def __init__(self, 
                 parent=None, #not sure what this is supposed to be... 
                 iface=None,
                 debug_logger=None, #testing only
                 ):
        """Constructor."""
        super(BldgsDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        
        self.iface=iface
        
        #setup logger
        self.logger = plugLogger(self.iface, parent=self, statusQlab=self.progressText,
                                 debug_logger=debug_logger)
        
        self.connect_slots()
        
        self.logger.debug('CanCurveDialog init finish')
        #self.logger.info('this woriks?')
        
 
        
    def connect_slots(self):
        """
        using the cointaier (dict) self.launch_actions to store functions
            that should be called once the dialog is launched
            see self.launch()
        """
        log = self.logger.getChild('connect_slots')
        log.debug('connecting slots')
 
        
        
        #=======================================================================
        # general----------------
        #=======================================================================
        self.close_pushButton.clicked.connect(self.close) 
        self.cancel_pushButton.clicked.connect(self.action_cancel_process)
        #=======================================================================
        # Tab: 02 Building Details-------
        #=======================================================================
        
        #=======================================================================
        # populate ui
        #=======================================================================
        #populate form options from parameters
        for k,v in building_details_options_d.items():
            #append empty
            options_l = v
            #retrieve the combo box matching the name
            log.debug(f'setting \'{k}\':{options_l}')
            comboBox = self._get_child(f'{k}_ComboBox', childType=QtWidgets.QComboBox)
            comboBox.addItems([str(e) for e in options_l])
            comboBox.setCurrentIndex(-1)
            
        #add the current date to the LineEdit
        self.dateCurveCreatedLineEdit.setText(datetime.datetime.now().strftime('%Y %m %d %H:%M:%S'))
        
        #username
        self.createdByLineEdit.setText(os.getlogin())
        
        
        #=======================================================================
        # Tab: 03 Data Input-----
        #=======================================================================
        
        #=======================================================================
        # populate ui
        #=======================================================================
        self.lineEdit_di_drf_db_fp.setText(drf_db_default_fp)
        self.lineEdit_wdir.setText(home_dir)
        
        
        #=======================================================================
        # Tab: 04 Create Curve---------
        #=======================================================================
        self.pushButton_Tcc_run.clicked.connect(self.action_Tcc_run)
        
        
        
        
        
    def action_tab_04_actions_run(self):
        """main ALL runner button
        
        pushButton_tab_04_actions_run
        
        TODO: implement QgsTask
        
        """
        log = self.logger.getChild('tab_04_actions_run')
        log.push(f'start')
        
        out_dir = self.lineEdit_wdir.text()

        
        
        #=======================================================================
        # run actions-------
        #=======================================================================
        self._run_c00_setup_project(logger=log)
        

        
    def action_tab_04_actions_step1(self):
        """step1 run button
        
        pushButton_tab_04_actions_step1"""
        self._run_c00_setup_project()
        
    def _run_c00_setup_project(self, logger=None):
        """retrive and run project setup
        
        re-factored so we can call it from multiple push buttons
        """
        if logger is None: logger = self.logger
        log = logger.getChild('_run')
        
        #=======================================================================
        # #retrieve info from UI----------
        #=======================================================================
        
        ci_fp = self.lineEdit_di_cifp.text()
        drf_db_fp = self.lineEdit_di_drf_db_fp.text()
        
        
        #curve_name = self.lineEdit_di_curveName.text() in settings_d
        bldg_meta = self.get_building_details(logger=log)
        fixed_costs_d = self.get_fixed_costs(logger=log)
        settings_d = self.get_settings(logger=log)
        
        
        #=======================================================================
        # run action--------
        #=======================================================================
        from .core import c00_setup_project
        
        
        return c00_setup_project(
            ci_fp, drf_db_fp=drf_db_fp, bldg_meta=bldg_meta, fixed_costs_d=fixed_costs_d,
            settings_d=settings_d, log=log
            
            )
        
        
        
        
    def action_cancel_process(self):
        """handle user cancel request
        
        may need to implement QgsTask for this to work
        
        cancel_pushButton
        
        
        """
        # 1. Set a flag to signal cancellation 
        self.process_should_cancel = True     
 
    
        # 3. Optionally provide feedback to the user and 
        self.logger.warning('user requested \'Cancel\'')
        #    (e.g., disable the cancel button, show a progress bar)
        
    def _get_building_details(self,
                              logger=None):
        """retrieve dataa from Building Details tab"""
        if logger is None: logger = self.logger
        log = logger.getChild('_get_building_details')
        
        #=======================================================================
        # extract from layouts----------
        #=======================================================================
        #=======================================================================
        # #general  building details
        #=======================================================================
        bldg_meta_d = get_formLayout_data(self.formLayout_t02_01)
        
        #=======================================================================
        # #size age materials (grid layout)
        #======================================================================= 
        bldg_meta_d.update(get_gridLayout_data(self.gridLayout_t02_02))
        
        #=======================================================================
        # location costs
        #=======================================================================
        bldg_meta_d.update(get_formLayout_data(self.formLayout_t02_03))
        
        #=======================================================================
        # misc
        #=======================================================================
        bldg_meta_d.update(get_formLayout_data(self.formLayout_t02_04))
        
        #=======================================================================
        # fixes----
        #=======================================================================
        for k,v in bldg_meta_d.copy().items():
            new_v=None
            if isinstance(v, str):
                if '\u00B2' in v:
                    new_v = v.replace('\u00B2', '2')
                elif v=='':
                    new_v = np.nan
                else:
                    new_v = convert_to_number(v) 
                    
                    
            if not new_v is None:
                bldg_meta_d[k] = new_v
                
        
        #=======================================================================
        # #check all of the keys are present
        #=======================================================================
        """
        bldg_meta_d['locationCityTownRegionLineEdit']
        for k,v in bldg_meta_d.items():
            print(f'{k}\n    {v} ({type(v)})')
        """
        
        log.debug(f'collected {len(bldg_meta_d)} entries from \'Building Details\' tab')
        building_meta_dtypes
        
        return bldg_meta_d
        
    def _get_fixed_costs(self, logger=None):
        """retireve fixed costs from 'Data Input' tab"""
        df_raw =  get_tabelWidget_data(self.tableWidget_di_fixedCosts)
        
        return df_raw.astype(float).set_index(df_raw.columns[0]).iloc[:, 0].to_dict()
 
 
        
    def _get_settings(self, logger=None):
        """retrieve project settings from Data Input  tab"""
        return {
            'curve_name':self.lineEdit_di_curveName.text(),
            'scale_m2':self.radioButton_di_rcvm2.isChecked(), #retrieve from radio buttons
            }


            

        
        
        
        
 
        

        
